module.exports = {
  env: {
    es6: true,
    browser: true,
    es2021: true,
    jest: true,
  },
  parser: '@typescript-eslint/parser',
  plugins: [
    'react',
    'react-hooks',
    '@typescript-eslint',
    'prettier',
    'eslint-plugin-import',
    'unused-imports',
  ],
  overrides: [
    {
      files: ['*.ts', '*.tsx'],
      parserOptions: {
        project: './tsconfig.json',
        ecmaFeatures: {
          jsx: true,
        },
        ecmaVersion: 2018,
        sourceType: 'module',
      },
      extends: [
        'eslint:recommended',
        'plugin:react/recommended',
        'plugin:@typescript-eslint/eslint-recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:@typescript-eslint/recommended-requiring-type-checking',
        'plugin:prettier/recommended',
      ],
      rules: {
        // Error
        '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: false }],
        'react-hooks/rules-of-hooks': 'error',
        'import/order': [
          'error',
          {
            groups: [['external', 'builtin'], 'internal', ['sibling', 'parent'], 'index'],
            pathGroups: [
              {
                pattern: '@(react)',
                group: 'external',
                position: 'before',
              },
              {
                pattern: '@(~app|~shared|~features|~pages|~entities)/**',
                group: 'internal',
              },
            ],
            pathGroupsExcludedImportTypes: ['internal', 'react'],
            'newlines-between': 'always',
            alphabetize: {
              order: 'asc',
              caseInsensitive: true,
            },
          },
        ],
        'unused-imports/no-unused-imports': 'error',
        'import/no-cycle': 'error',
        'constructor-super': 'error',
        'no-this-before-super': 'error',
        'no-useless-computed-key': 'error',
        'no-useless-constructor': 'off',
        'no-useless-rename': 'error',
        'no-var': 'error',
        'object-shorthand': 'error',
        'prefer-template': 'error',
        'no-restricted-syntax': ['error', 'ForInStatement', 'SequenceExpression'],
        'no-caller': 'error',
        'no-template-curly-in-string': 'error',
        'array-callback-return': 'error',
        'no-eval': 'error',
        'no-extend-native': 'error',
        eqeqeq: ['error', 'always'],
        'no-lone-blocks': 'error',
        'no-proto': 'error',
        'no-script-url': 'error',
        'no-self-compare': 'error',
        'no-sequences': 'error',
        'no-throw-literal': 'error',
        'no-undef-init': 'error',
        'no-nested-ternary': 'error',
        'no-unneeded-ternary': 'error',
        'no-debugger': 'error',
        'no-empty': 'error',
        'no-unused-labels': 'error',
        'prefer-const': 'error',

        // Warn
        '@typescript-eslint/no-empty-function': 'warn',
        '@typescript-eslint/no-explicit-any': 'warn',
        '@typescript-eslint/no-unsafe-assignment': 'warn',
        '@typescript-eslint/no-unsafe-call': 'warn',
        '@typescript-eslint/no-floating-promises': 'warn',
        'react/display-name': 'warn',
        'react/prop-types': 'warn',
        'react-hooks/exhaustive-deps': 'warn',
        'no-console': 'warn',
        '@typescript-eslint/no-non-null-assertion': 'warn',
        'unused-imports/no-unused-vars': [
          'warn',
          {
            vars: 'all',
            varsIgnorePattern: '^_',
            args: 'after-used',
            argsIgnorePattern: '^_',
          },
        ],

        // Off
        'react/jsx-uses-react': 'off',
        'react/react-in-jsx-scope': 'off',
        'no-case-declarations': 'off',
        '@typescript-eslint/unbound-method': 'off',
        '@typescript-eslint/no-unsafe-member-access': 'off',
        '@typescript-eslint/no-unsafe-argument': 'off',
        '@typescript-eslint/restrict-template-expressions': 'off',
        '@typescript-eslint/no-unsafe-return': 'off',
        '@typescript-eslint/restrict-plus-operands': 'off',
        '@typescript-eslint/no-unused-vars': 'off',
        'no-extra-semi': 'off',
        'prefer-destructuring': 'off',
        camelcase: 'off',
      },
    },
  ],
  settings: {
    react: {
      version: 'detect',
    },
  },
};
